//=========================================================
// src/Interrupts.c: generated by Hardware Configurator
//
// This file will be regenerated when saving a document.
// leave the sections inside the "$[...]" comment tags alone
// or they will be overwritten!!
//=========================================================

// USER INCLUDES
#include <SI_EFM8BB3_Register_Enums.h>

// SI_SBIT is a macro that helps with setting up access to pin input/output.
// The first one is the name of your "variable", the second which port it's on, and the third which bit in that port.
// For example, the first push button (PB0), is located on I/O port 0, and is bit 2 on that port, hence SFR_P0 and 2.
SI_SBIT(PB0, SFR_P0, 2);
SI_SBIT(PB1, SFR_P0, 3);

// The "OUT_" here is only because its easier for me to see the difference between inputs and outputs, it's not necessary.
SI_SBIT(OUT_LED_G, SFR_P1, 6);
SI_SBIT(OUT_LED_B, SFR_P1, 7);
SI_SBIT(OUT_LED_R, SFR_P2, 0);

volatile uint8_t ledIntensity = 0; // variables accessed from inside interrupts must be volatile, otherwise the compiler MIGHT do optimize them away, your code will work in debug builds but not otherwise.

//-----------------------------------------------------------------------------
// TIMER2_ISR
//-----------------------------------------------------------------------------
//
// TIMER2 ISR Content goes here. Remember to clear flag bits:
// TMR2CN0::TF2H (Timer # High Byte Overflow Flag)
// TMR2CN0::TF2L (Timer # Low Byte Overflow Flag)
//
//-----------------------------------------------------------------------------
SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
{
	SFRPAGE = 0x0; // TIMER2 control 0 register and PCA channel 0 registers are both located on SFPRAGE 0x0 (and 0x10).
	TMR2CN0_TF2H = 0; // Reset the timer 2 interrupt, if not, the timer interrupt will trigger again and again

	if(PB1 == 0) // PB0 and PB1 are active low on the dev-board, meaning that when the button is pressed, PB1 will be 0.
	{
		if(ledIntensity < 255) // Make sure uint8 does not go over 255, since it would wrap around back to 0
			ledIntensity++;
	}
	else
	{
		if(ledIntensity > 0)
			ledIntensity--;
	}

	SFRPAGE = 0x0; // We already set the SFRPAGE to 0x0 above, but he PCA registers are also located there, i will have this here as a reminder if you want to control them from other code that has not already put SFRPAGE to 0x0

	if(0) // if(0) will never run, its only here to show
	{
		// Set PCA channel 0 to output 8 bit PWM:
		PCA0CPM0 = PCA0CPM0_PWM__ENABLED;
	}
	if(0)
	{
		// Stop PCA channel 0 from being 8 bit PWM:
		PCA0CPM0 = 0;
	}


	// If you use 8 bit PWM, you only need to set the "high" registers, otherwise the low and high register contain some part of the value each.
	// you can read more about this on page 261 in in the reference manual under "8-bit Pulse Width Modulator Mode" (https://www.silabs.com/documents/public/reference-manuals/efm8bb3-rm.pdf)

	// Since we use 8 bit PWM, the duty cycle is controlled with a single 8-bit value.
	// The hardware can be configured so that 0 means either high or low output all the time (Output polarity in the graphical editer, either default or inverted).
	// In our case, 0 means its high 100% of the time, and since the leds are connected as such:
	// 3.3V -> Resistor -> LED -> Micro controller pin
	// the LED will light only when this pin outputs 0 (the LED is said to be "active low")
	// The default configuration of the PWM is that the duty cycle is 255 - PCA0CPH0, so 0 ledIntensity means 100% duty cycle, and with an active low LED that means it will be off.
	PCA0CPH0 = (ledIntensity << PCA0CPH0_PCA0CPH0__SHIFT);


	OUT_LED_G = PB0; // Have the green LED be on while you hold PB0
}

